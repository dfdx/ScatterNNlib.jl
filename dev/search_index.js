var documenterSearchIndex = {"docs":
[{"location":"manual/scatter/#Scatter-operations","page":"Scatter operations","title":"Scatter operations","text":"","category":"section"},{"location":"manual/scatter/","page":"Scatter operations","title":"Scatter operations","text":"scatter_add!","category":"page"},{"location":"manual/scatter/","page":"Scatter operations","title":"Scatter operations","text":"scatter_sub!","category":"page"},{"location":"manual/scatter/","page":"Scatter operations","title":"Scatter operations","text":"scatter_mul!","category":"page"},{"location":"manual/scatter/","page":"Scatter operations","title":"Scatter operations","text":"scatter_div!","category":"page"},{"location":"manual/scatter/","page":"Scatter operations","title":"Scatter operations","text":"scatter_max!","category":"page"},{"location":"manual/scatter/#ScatterNNlib.scatter_max!","page":"Scatter operations","title":"ScatterNNlib.scatter_max!","text":"scatter_max!(ys, us, xs)\n\nScatter maximum operation.\n\nys[:, xs[k]...] = max.(ys[:, xs[k]...], us[:, k...])\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"function"},{"location":"manual/scatter/","page":"Scatter operations","title":"Scatter operations","text":"scatter_min!","category":"page"},{"location":"manual/scatter/#ScatterNNlib.scatter_min!","page":"Scatter operations","title":"ScatterNNlib.scatter_min!","text":"scatter_min!(ys, us, xs)\n\nScatter minimum operation.\n\nys[:, xs[k]...] = min.(ys[:, xs[k]...], us[:, k...])\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"function"},{"location":"manual/scatter/","page":"Scatter operations","title":"Scatter operations","text":"scatter_mean!","category":"page"},{"location":"manual/scatter/#ScatterNNlib.scatter_mean!","page":"Scatter operations","title":"ScatterNNlib.scatter_mean!","text":"scatter_mean!(ys, us, xs)\n\nScatter mean operation.\n\nys[:, xs[k]...] = mean.(ys[:, xs[k]...], us[:, k...])\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = ScatterNNlib","category":"page"},{"location":"#ScatterNNlib","page":"Home","title":"ScatterNNlib","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ScatterNNlib]","category":"page"},{"location":"#ScatterNNlib.gather-Union{Tuple{N}, Tuple{T}, Tuple{AbstractArray{T,N},AbstractArray{#s66,N} where #s66<:Integer,Integer}} where N where T","page":"Home","title":"ScatterNNlib.gather","text":"Inverse operation of scatter\n\n\n\n\n\n","category":"method"},{"location":"#ScatterNNlib.save_div-Tuple{Any,Any}","page":"Home","title":"ScatterNNlib.save_div","text":"save_div(x, y)\n\nSavely divde x by y. If y is zero, return x directly.\n\n\n\n\n\n","category":"method"},{"location":"#ScatterNNlib.scatter_add!","page":"Home","title":"ScatterNNlib.scatter_add!","text":"scatter_add!(ys, us, xs)\n\nScatter addition operation.\n\nys[:, xs[k]...] = ys[:, xs[k]...] .+ us[:, k...]\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"function"},{"location":"#ScatterNNlib.scatter_div!","page":"Home","title":"ScatterNNlib.scatter_div!","text":"scatter_div!(ys, us, xs)\n\nScatter division operation.\n\nys[:, xs[k]...] = ys[:, xs[k]...] ./ us[:, k...]\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"function"},{"location":"#ScatterNNlib.scatter_max!-Union{Tuple{T}, Tuple{Array{T,N} where N,Array{T,N} where N,Array{#s19,N} where N where #s19<:Union{Integer, Tuple}}} where T<:Real","page":"Home","title":"ScatterNNlib.scatter_max!","text":"scatter_max!(ys, us, xs)\n\nScatter maximum operation.\n\nys[:, xs[k]...] = max.(ys[:, xs[k]...], us[:, k...])\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"method"},{"location":"#ScatterNNlib.scatter_mean!-Union{Tuple{T}, Tuple{Array{T,N} where N,Array{T,N} where N,Array{#s14,N} where N where #s14<:Union{Integer, Tuple}}} where T<:Real","page":"Home","title":"ScatterNNlib.scatter_mean!","text":"scatter_mean!(ys, us, xs)\n\nScatter mean operation.\n\nys[:, xs[k]...] = mean.(ys[:, xs[k]...], us[:, k...])\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"method"},{"location":"#ScatterNNlib.scatter_min!-Union{Tuple{T}, Tuple{Array{T,N} where N,Array{T,N} where N,Array{#s12,N} where N where #s12<:Union{Integer, Tuple}}} where T<:Real","page":"Home","title":"ScatterNNlib.scatter_min!","text":"scatter_min!(ys, us, xs)\n\nScatter minimum operation.\n\nys[:, xs[k]...] = min.(ys[:, xs[k]...], us[:, k...])\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"method"},{"location":"#ScatterNNlib.scatter_mul!","page":"Home","title":"ScatterNNlib.scatter_mul!","text":"scatter_mul!(ys, us, xs)\n\nScatter multiplication operation.\n\nys[:, xs[k]...] = ys[:, xs[k]...] .* us[:, k...]\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"function"},{"location":"#ScatterNNlib.scatter_sub!","page":"Home","title":"ScatterNNlib.scatter_sub!","text":"scatter_sub!(ys, us, xs)\n\nScatter subtraction operation.\n\nys[:, xs[k]...] = ys[:, xs[k]...] .- us[:, k...]\n\nArguments\n\nys: the destination for us to aggregate to. This argument will be mutated.\nus: the source data for aggregating.\nxs: the mapping for aggregation from source (index) to destination (value).\n\nThe index of xs is corresponding to the index of us and the value of xs is corresponding to the index of ys. The value of xs can be Int or Tuple type.\n\nThe dimension of us must equal to one plus dimension of xs. ys, us and xs must be supported array type and be the same type.Array, StaticArray and CuArray are currently supported.\n\n\n\n\n\n","category":"function"}]
}
